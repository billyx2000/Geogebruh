#!/usr/bin/python

#
# Interactive graph drawing with dynamic user entry, and window manipulation
#
# Initial @Milan
# Modified @Grraahaam
#
# Tkinter documentation : https://www.tcl.tk/man/tcl8.6/TkCmd/contents.htm
# MatPlotLib documentation : https://matplotlib.org/3.3.2/py-modindex.html
#

# Import system library (used to test python version)
import sys

# Import our own libraries
import lib_window as Wd

# Import Tkinter methods (Window interface)
if sys.version_info[0] == 3:
    # Python3 (lowercase 't')
    import tkinter as Tk
    from tkinter import messagebox
else:
    # Python2 (uppercase 't')
    import Tkinter as Tk
    from Tkinter import messagebox

# Import Numpy (math mathods) and Matplotlib (Graph generation)
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, NavigationToolbar2Tk)

# Defining local graph update function (to avoid variable scope errors)
def update(*args) :
    Wd.UpdateGraph(fig, input_func, input_range_min, input_range_max, input_step)

# Initiate the window and set its title
windowHandler = Wd.WindowHandler()
window = windowHandler.tk
window.wm_title("Geogebruh")
plt.style.use('dark_background')

fig = Figure(figsize=(5, 4), dpi=100)

# Ranges initialization
range_min = 0
range_max = 10
range_step = .05

# Set the default ranges and math expression (by default : f(t) = sqrt(x)+sin(x))
x = np.arange(range_min, range_max, range_step)
fx = np.sqrt(x)+np.sin(x)

fig.add_subplot(1,1,1).plot(x, fx)

# Draw the graph
canvas = FigureCanvasTkAgg(fig, master=window)
canvas.get_tk_widget().pack(side=Tk.BOTTOM, fill=Tk.BOTH, expand=1)
canvas.draw()

# Configure toolbar (removing useless buttons, e.g. plot configuration)
NavigationToolbar2Tk.toolitems = [t for t in NavigationToolbar2Tk.toolitems if t[0] not in ('Subplots',)]

# Add toolbar to the graph, allowing zoom/pan/reset
# Creating a new frame to align the toolbar and it's coordinates in the top left corner
toolbar_frame = Tk.Frame(window)
toolbar = NavigationToolbar2Tk(canvas, toolbar_frame)
toolbar_frame.pack(side=Tk.LEFT, fill=Tk.X)
toolbar.update()

# Generate the submit button (bind the graph update function to it)
submit = Tk.Button(window, text='Tracer', command=update)
submit.pack(side=Tk.RIGHT)

# Also bind the returns keypress to update the graph
window.bind('<Return>', update)
window.bind('<KP_Enter>', update)

# Define range/step fields and labels
input_range_min = Tk.Entry(window, bd=2, width=5)
input_range_min.insert(0, "0")
input_range_min.pack(side=Tk.RIGHT)

label_range_min = Tk.Label(window, text="MIN")
label_range_min.pack(side=Tk.RIGHT)

input_range_max = Tk.Entry(window, bd=2, width=5)
input_range_max.insert(0, "10")
input_range_max.pack(side=Tk.RIGHT)

label_range_max = Tk.Label(window, text="MAX")
label_range_max.pack(side=Tk.RIGHT)

input_step = Tk.Entry(window, bd=2, width=5)
input_step.insert(0, ".05")
input_step.pack(side=Tk.RIGHT)

label_step = Tk.Label(window, text="STEP")
label_step.pack(side=Tk.RIGHT)

# Define function input field and labels
input_func = Tk.Entry(window, bd=2)
input_func.insert(0, "sqrt(x)+sin(x)")
input_func.pack(side=Tk.RIGHT)

label_func = Tk.Label(window, text="f(x) = ")
label_func.pack(side=Tk.RIGHT)

# Maintains the window open
window.tk.mainloop()
